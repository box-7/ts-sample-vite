name: CI # ワークフローの名前

on: # ワークフローのトリガーとなるイベントを定義
  push:
    branches:
      - main
  workflow_dispatch: # GitHub Actions の UI から手動で実行するためのトリガー

jobs: # ワークフローのジョブを定義
  build:  # ワークフローのジョブid
    runs-on: ubuntu-latest # ジョブを実行するランナーの環境を指定
    env :
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
    steps:
      - name: Checkout repository  # ワークフローのジョブ内でリポジトリのコードを取得し、ビルド、テスト、デプロイなどの操作ができる
        uses: actions/checkout@v4 # usesキーでアクションを指定
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Run Prettier
        run: npx prettier --write .
      - name: Check environment variables  # 環境変数が設定されているか確認
      # -z: このオプションは、文字列が空であるかどうかを確認
      #  $ は、シェルスクリプトで変数を参照するために使用される
      # run: |は、GitHub Actionsのワークフローファイル（YAMLファイル）で複数行のシェルコマンドを実行するために使用される
        run: |
          if [ -z "${{ VITE_SUPABASE_URL }}" ]; then echo "VITE_SUPABASE_URL is not set"; else echo "VITE_SUPABASE_URL is set"; fi
          if [ -z "${{ VITE_SUPABASE_ANON_KEY }}" ]; then echo "VITE_SUPABASE_ANON_KEY is not set"; else echo "VITE_SUPABASE_ANON_KEY is set"; fi
      - name: Run tests
        run: npm run test # 環境変数は定義済み
      - name: Build project
        run: npm run build # 環境変数は定義済み
      # アーティファクト(ソフトウェア開発プロセスにおいて生成される成果物)をアップロード
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          # アップロードするアーティファクトの名前を指定
          # この名前は、後のステップでアーティファクトをダウンロードする際に使用される
          name: build-artifacts
          # アップロードするファイルやディレクトリのパスを指定
          # distディレクトリ内のすべてのファイルがアーティファクトとしてアップロードされる
          path: dist

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: build
    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          # cache: "npm": npmキャッシュを有効にして、依存関係のインストールを高速化
          # インストール時間の短縮、ネットワーク負荷の軽減、一貫性の向上、コスト削減
          cache: "npm"
      # - name: Install firebase-tools
      #   run: npm install --save-dev firebase-tools
      # -gオプションは、パッケージをグローバルにインストールする
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      - name: Decode Firebase service account key
        run: |
          echo "${{ secrets.FIREBASE_KEY }}" | base64 -d > ./firebase-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/firebase-key.json" >> $GITHUB_ENV
      # GitHub Secretsに保存されているFIREBASE_KEYを取得し、Base64デコードしてfirebase-key.jsonというファイルに保存
      # GOOGLE_APPLICATION_CREDENTIALSという環境変数を設定し、その値をfirebase-key.jsonのパスに設定
      # この環境変数は、Firebase CLIが認証に使用
      # GitHub Actionsのコンテキスト変数で、現在のワークスペースディレクトリのパスを指す

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist

      - name: Deploy to Firebase
        run: firebase deploy --only hosting

      # - name: change space
      #   run: ./node_modules/.bin/firebase use ${{ secrets.FIREBASE_PROJECT_ID }}
      # - name: Deploy to Firebase Hosting
      #   run: |
      #     ./node_modules/.bin/firebase deploy
      #   env:
      #     FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      #     FIREBASE_CLI_EXPERIMENTS: webframeworks
      # - name: delete GOOGLE_APPLICATION_CREDENTIALS
      #   run: rm $GOOGLE_APPLICATION_CREDENTIALS
      #   if: ${{ always() }}
