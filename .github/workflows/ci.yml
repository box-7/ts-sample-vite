name: CI

on:
  push:
    branches:
      - main  # ここで指定したブランチにプッシュされたときにパイプラインが動作します
  workflow_dispatch: # GitHub Actions の UI から手動で実行するためのトリガー

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # 使用する Node.js のバージョンを指定

      - name: Install dependencies
        run: npm install

      - name: Run Prettier
        run: npx prettier --write .

      - name: Check environment variables  # 環境変数が設定されているか確認
      # -z: このオプションは、文字列が空であるかどうかを確認
      #  $ は、シェルスクリプトで変数を参照するために使用される
        run: |
          if [ -z "${{ secrets.VITE_SUPABASE_URL }}" ]; then echo "VITE_SUPABASE_URL is not set"; else echo "VITE_SUPABASE_URL is set"; fi
          if [ -z "${{ secrets.VITE_SUPABASE_ANON_KEY }}" ]; then echo "VITE_SUPABASE_ANON_KEY is not set"; else echo "VITE_SUPABASE_ANON_KEY is set"; fi

      - name: Run tests
        run: npm run test
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Build project
        run: npm run build  # ビルドステップを追加
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      # アーティファクトをダウンロードする際に使用
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          # アップロードするアーティファクトの名前を指定。この名前は、後のステップでアーティファクトをダウンロードする際に使用される
          name: build-artifacts
          # アップロードするファイルやディレクトリのパスを指定。distディレクトリ内のすべてのファイルがアーティファクトとしてアップロードされる
          path: dist

      # - name: Install Firebase CLI  # Firebase CLI をインストールするステップを追加
      #   run: npm install -g firebase-tools

      # - name: Set up Firebase authentication  # Firebase 認証の設定
      #   run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" > $HOME/service-account.json
      #   env:
      #     GOOGLE_APPLICATION_CREDENTIALS: $HOME/service-account.json

      # # - name: Check GOOGLE_APPLICATION_CREDENTIALS  # デバッグ情報の追加
      # #   run: cat $HOME/service-account.json

      # - name: Deploy to Firebase
      #   env:
      #     GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      #     # GOOGLE_APPLICATION_CREDENTIALS: $HOME/service-account.json
      #     FIREBASE_CLI_EXPERIMENTS: webframeworks
      #   run: firebase deploy --only hosting   # 自動デプロイステップを追加

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # - name: Setup Node.js and cache # assignment1では、and cacheがない
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Install firebase-tools
        run: npm install --save-dev firebase-tools
      - name: Decode Firebase service account key
        run: |
          echo "${{ secrets.FIREBASE_KEY }}" | base64 -d > ./firebase-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/firebase-key.json" >> $GITHUB_ENV

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist

      - name: change space
        run: ./node_modules/.bin/firebase use ${{ secrets.FIREBASE_PROJECT_ID }}
      - name: Deploy to Firebase Hosting
        run: |
          ./node_modules/.bin/firebase deploy
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_CLI_EXPERIMENTS: webframeworks
      - name: delete GOOGLE_APPLICATION_CREDENTIALS
        run: rm $GOOGLE_APPLICATION_CREDENTIALS
        if: ${{ always() }}
