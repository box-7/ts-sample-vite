// tsconfig.json
// TypeScript コンパイラの設定ファイルで、プロジェクト全体のコンパイルオプションやファイルのインクルード/エクスクルード設定を指定
// このファイルを使用して、TypeScript コンパイラがどのようにコードを解釈し、コンパイルするかを制御
// TypeScript におけるコンパイルとは、TypeScript のコードを JavaScript のコードに変換するプロセスのこと

{
        // TypeScript コンパイラのオプションを指定
        "compilerOptions": {
                "target": "ESNext",
                "useDefineForClassFields": true,
                "lib": ["DOM", "DOM.Iterable", "ESNext"],
                "module": "ESNext",
                "skipLibCheck": true,
                "allowJs": false,
                "moduleResolution": "Bundler",
                "allowImportingTsExtensions": true,
                "isolatedModules": true,
                "noEmit": true,
                "jsx": "react-jsx",
                "strict": true,
                "allowSyntheticDefaultImports": true,
                "esModuleInterop": false,
                "forceConsistentCasingInFileNames": true,
                "resolveJsonModule": true,
                "types": ["node", "jest", "@testing-library/jest-dom"],
                "baseUrl": ".",
                "paths": {
                        "@/*": ["./src/*"]
                }
        },
        // コンパイル対象のファイルやディレクトリを指定
        "include": ["src"],
}

// compilerOptions:
// TypeScript コンパイラのオプションを指定する。これには、ターゲットの ECMAScript バージョン、モジュールシステム、型チェックの厳密さなどが含まれる。
// include:
// コンパイル対象のファイルやディレクトリを指定する。
// exclude:
// コンパイル対象から除外するファイルやディレクトリを指定する。
// files:
// コンパイル対象の特定のファイルを指定する。

//   compilerOptions の各オプションの解説
//   target: "ESNext"
//   コンパイルされたJavaScriptのターゲットバージョンを指定します。ESNext は最新のECMAScript標準をターゲットにします。
//   useDefineForClassFields: true
//   クラスフィールドの初期化に define プロパティを使用します。これにより、クラスフィールドがより標準に準拠した方法で定義されます。
//   lib: ["DOM", "DOM.Iterable", "ESNext"]
//   プロジェクトで使用するライブラリを指定します。DOM と DOM.Iterable はブラウザ環境のAPIを含み、ESNext は最新のECMAScript標準を含みます。
//   module: "ESNext"
//   モジュールシステムを指定します。ESNext は最新のECMAScriptモジュールシステムを使用します。
//   skipLibCheck: true
//   ライブラリファイル（node_modules 内の型定義ファイル）の型チェックをスキップします。これにより、コンパイル時間が短縮されます。
//   allowJs: false
//   JavaScriptファイルのコンパイルを許可しません。TypeScriptファイルのみをコンパイル対象とします。
//   moduleResolution: "Bundler"
//   モジュール解決戦略を指定します。Bundler はバンドラー（WebpackやRollup）と同じ方法でモジュールを解決します。
//   allowImportingTsExtensions: true
//   TypeScriptファイルのインポート時に拡張子を含めることを許可します。
//   isolatedModules: true
//   各ファイルを独立したモジュールとして扱います。これにより、TypeScriptのトランスパイルが簡素化されます。
//   noEmit: true
//   コンパイル時に出力ファイルを生成しません。型チェックのみを行います。
//   jsx: "react-jsx"
//   JSXの構文をReactのJSXトランスフォーマーに変換します。
//   strict: true
//   TypeScriptの厳格な型チェックオプションを有効にします。これには、noImplicitAny や strictNullChecks などが含まれます。
//   allowSyntheticDefaultImports: true
//   デフォルトエクスポートがないモジュールでも、デフォルトインポートを許可します。
//   esModuleInterop: false
//   ESモジュールとCommonJSモジュールの互換性を向上させるオプションです。false に設定されていますが、true にすると、import と require の互換性が向上します。
//   forceConsistentCasingInFileNames: true
//   ファイル名の大文字小文字の一貫性を強制します。これにより、異なる大文字小文字のファイル名によるエラーを防ぎます。
//   resolveJsonModule: true
//   JSONファイルをモジュールとしてインポートすることを許可します。
//   types: ["node", "jest", "@testing-library/jest-dom"]
//   プロジェクトで使用する型定義ファイルを指定します。node、jest、および @testing-library/jest-dom の型定義が含まれています。
//   baseUrl: "."
//   モジュール解決の基準となるディレクトリを指定します。"." はプロジェクトのルートディレクトリを指します。
//   paths: { "@/": ["./src/"] }
//   モジュール解決のエイリアスを指定します。@/ を src にマッピングします。これにより、@/components のようなインポートが可能になります。
//   include の解説
//   include: ["src"]
//   コンパイル対象のファイルを含むディレクトリを指定します。この場合、src ディレクトリ内のファイルがコンパイル対象となります。


// コメントアウトされたオプションの解説
// allowJs: false
// JavaScriptファイルのコンパイルを許可しない。TypeScriptファイルのみをコンパイル対象とする。
// コメント: jinさんの設定にはないが、あなたの設定には含まれている。JavaScriptファイルを含める必要がない場合は、この設定を有効にしておくと良い。
// moduleResolution: "Node"
// Node.js のモジュール解決アルゴリズムを使用する。これは、Node.js 環境で一般的に使用されるモジュール解決方法。
// コメント: ChakraUI 公式ドキュメントに従って Bundler を使用しているが、Node.js 環境で動作する場合やバンドラーを使用しない場合は Node を使用することもある。
// moduleDetection: "force"
// モジュールとして扱うファイルを強制的に検出する。通常、import や export ステートメントがあるファイルはモジュールとして扱われるが、このオプションを使用すると、明示的にモジュールとして扱うことができる。
// コメント: jinさんの設定にはあるが、あなたの設定にはなくても動作している。特定の状況でモジュール検出を強制する必要がある場合に使用する。
// noUnusedLocals: true
// 使用されていないローカル変数をエラーとして報告する。コードのクリーンアップに役立つ。
// コメント: jinさんの設定にはあるが、あなたの設定にはなくても動作している。コードの品質を向上させるために有効にすることが推奨される。
// noUnusedParameters: true
// 使用されていない関数のパラメーターをエラーとして報告する。コードのクリーンアップに役立つ。
// コメント: jinさんの設定にはあるが、あなたの設定にはなくても動作している。コードの品質を向上させるために有効にすることが推奨される。
// noFallthroughCasesInSwitch: true
// switch 文のケースがフォールスルーする（次のケースに自動的に進む）ことを防ぐ。意図しないフォールスルーを防ぐために役立つ。
// コメント: jinさんの設定にはあるが、あなたの設定にはなくても動作している。switch 文のバグを防ぐために有効にすることが推奨される。




//       {
//         "compilerOptions": {
//           "module": "ESNext",
//           "moduleResolution": "Bundler",
//           "skipLibCheck": true,
//           "paths": {
//             "@/*": ["./src/*"]
//           }
//         }
//       }

// {
//   "files": [],
//   "references": [
//     { "path": "./tsconfig.app.json" },
//     { "path": "./tsconfig.node.json" }
//   ]
// }